from flask import Flask, jsonify, render_template_string, request, redirect, session, make_response
import requests
import json
import os
from zeep import Client
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.executors.pool import ThreadPoolExecutor
from flask_cors import CORS
from flask_session import Session
import time
import csv
from datetime import datetime
from flask import send_file
import redis
import re

CSV_DIR = "./csv_reports"  # –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è CSV-—Ñ–∞–π–ª–æ–≤
os.makedirs(CSV_DIR, exist_ok=True)  # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç

# üîπ PowerBody API (SOAP)


USERNAME = os.getenv('USERNAME')
PASSWORD = os.getenv('PASSWORD')
WSDL_URL = os.getenv('URL')

app = Flask(__name__)
CORS(app)
REDIS_HOST = os.getenv("REDIS_HOST")
REDIS_PORT = int(os.getenv("REDIS_PORT"))
REDIS_USERNAME = os.getenv("REDIS_USERNAME")
REDIS_PASSWORD = os.getenv("REDIS_PASSWORD")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis Cloud
redis_client = redis.StrictRedis(
    host=REDIS_HOST,
    port=REDIS_PORT,
    username=REDIS_USERNAME,
    password=REDIS_PASSWORD,
    decode_responses=True
)

# üîπ Shopify API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
SHOPIFY_CLIENT_ID = os.getenv('CLIENT_ID')
SHOPIFY_API_SECRET = os.getenv('API_SECRET')
SHOPIFY_SCOPES = "read_products,write_products,write_inventory"
APP_URL = os.getenv('APP_URL')  # ‚ö†Ô∏è –£–∫–∞–∑–∞—Ç—å —Å–≤–æ–π URL –æ—Ç ngrok
REDIRECT_URI = f"{APP_URL}/auth/callback"

app.config["SECRET_KEY"] = os.getenv("SECRET_KEY", os.urandom(24).hex())  # –ò—Å–ø–æ–ª—å–∑—É–µ–º .env –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π
app.config["SESSION_TYPE"] = "redis"
app.config["SESSION_PERMANENT"] = False
app.config["SESSION_USE_SIGNER"] = True
app.config["SESSION_KEY_PREFIX"] = "session:"
app.config["SESSION_REDIS"] = redis.StrictRedis(
    host=REDIS_HOST,
    port=REDIS_PORT,
    username=REDIS_USERNAME,
    password=REDIS_PASSWORD,
    decode_responses=True
)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Å—Å–∏–∏
Session(app)

SETTINGS_FILE = "settings.json"

# üîπ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
executors = {'default': ThreadPoolExecutor(max_workers=10)}
scheduler = BackgroundScheduler(executors=executors)
scheduler.start()


@app.before_request
def log_request():
    print(f"üì• –í—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å: {request.method} {request.url} | IP: {request.remote_addr}")


def save_token(shop, access_token):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–∫–µ–Ω –º–∞–≥–∞–∑–∏–Ω–∞ –≤ Redis Cloud —Å TTL"""
    token_key = f"shopify_token:{shop}"
    redis_client.set(token_key, access_token, ex=2592000)  # 30 –¥–Ω–µ–π TTL

    stored_token = redis_client.get(token_key)
    ttl = redis_client.ttl(token_key)

    if stored_token:
        print(f"‚úÖ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ Redis: {shop} ‚Üí {stored_token[:8]}*** (TTL: {ttl} —Å–µ–∫)")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –ù–ï —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ Redis!")


@app.route("/test_redis")
def test_redis():
    redis_client.set("foo", "bar")
    value = redis_client.get("foo")
    return f"Redis Cloud —Ä–∞–±–æ—Ç–∞–µ—Ç! foo = {value}"


def get_token(shop):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –º–∞–≥–∞–∑–∏–Ω–∞ –∏–∑ Redis"""
    token_key = f"shopify_token:{shop}"
    token = redis_client.get(token_key)
    ttl = redis_client.ttl(token_key)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL

    if token:
        if ttl == -1:  # –ï—Å–ª–∏ —É —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç TTL, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
            redis_client.expire(token_key, 2592000)  # 30 –¥–Ω–µ–π
            print(f"üîÑ –û–±–Ω–æ–≤–ª—ë–Ω TTL —Ç–æ–∫–µ–Ω–∞ –¥–ª—è {shop} (30 –¥–Ω–µ–π)")

        print(f"üì• –¢–æ–∫–µ–Ω –∏–∑ Redis –¥–ª—è {shop}: {token[:8]}*** (TTL: {ttl} —Å–µ–∫)")
        return token
    else:
        print(f"‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Redis –¥–ª—è {shop} (TTL: {ttl} —Å–µ–∫)")
        return None


@app.route("/")
def home():
    shop = request.args.get("shop") or request.cookies.get("shop")
    print(f"üõí –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ / —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º shop: {shop}")  # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å

    if not shop:
        print("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä 'shop'. –ó–∞–ø—Ä–æ—Å:", request.args, request.cookies)
        return "‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä 'shop'.", 400

    access_token = get_token(shop)
    print(f"üîë –¢–æ–∫–µ–Ω –¥–ª—è {shop}: {access_token}")

    if not access_token:
        print(f"üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ /install?shop={shop}")
        return redirect(f"/install?shop={shop}")

    print(f"‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ /admin?shop={shop}")
    return redirect(f"/admin?shop={shop}")


@app.route("/install")
def install_app():
    shop = request.args.get("shop")
    print(f"üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è: {shop}")

    if not shop:
        print("‚ùå –û—à–∏–±–∫–∞: –ø–∞—Ä–∞–º–µ—Ç—Ä 'shop' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        return "‚ùå –û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω Shopify", 400

    if redis_client.ping():
        session["shop"] = shop
    else:
        print("‚ö†Ô∏è Redis –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å–µ—Å—Å–∏–∏.")
    authorization_url = (
        f"https://{shop}/admin/oauth/authorize"
        f"?client_id={SHOPIFY_CLIENT_ID}"
        f"&scope={SHOPIFY_SCOPES}"
        f"&redirect_uri={REDIRECT_URI}"
    )

    print(f"üîó –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ Shopify OAuth: {authorization_url}")
    return redirect(authorization_url)


@app.route("/auth/callback")
def auth_callback():
    shop = request.args.get("shop")
    code = request.args.get("code")

    print(f"üìû –í—ã–∑–≤–∞–Ω `auth_callback`")
    print(f"üîç –ü–æ–ª—É—á–µ–Ω shop: {shop}")
    print(f"üîç –ü–æ–ª—É—á–µ–Ω code: {code}")

    if not code or not shop:
        print("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç `code` –∏–ª–∏ `shop` –≤ `auth_callback`.")
        return "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç `code` –∏–ª–∏ `shop`", 400

    token_url = f"https://{shop}/admin/oauth/access_token"
    data = {
        "client_id": SHOPIFY_CLIENT_ID,
        "client_secret": SHOPIFY_API_SECRET,
        "code": code
    }

    print(f"üîó –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ {token_url} —Å –¥–∞–Ω–Ω—ã–º–∏: {data}")

    response = requests.post(token_url, json=data)

    print(f"üì¶ –û—Ç–≤–µ—Ç Shopify: {response.status_code} | {response.text}")

    if response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏! Shopify –≤–µ—Ä–Ω—É–ª {response.status_code} | {response.text}")
        return f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}", 400

    try:
        json_response = response.json()
        access_token = json_response.get("access_token")
        if not access_token:
            print("‚ùå –û—à–∏–±–∫–∞: `access_token` –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ Shopify!")
            return f"‚ùå –û—à–∏–±–∫–∞: `access_token` –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ Shopify: {json_response}", 400

        print(f"‚úÖ Shopify –≤–µ—Ä–Ω—É–ª —Ç–æ–∫–µ–Ω: {access_token[:8]}***")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ Redis
        save_token(shop, access_token)

        response = make_response(redirect(f"/admin?shop={shop}"))
        response.set_cookie("shop", shop, httponly=True, samesite="None", secure=True)

        if redis_client.ping():
            start_sync_for_shop(shop, access_token)
        else:
            print("‚ö†Ô∏è Redis –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞.")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON –æ—Ç–≤–µ—Ç–∞ Shopify: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON –æ—Ç–≤–µ—Ç–∞ Shopify: {str(e)}", 400


@app.route("/admin")
def admin():
    """–í—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Shopify Admin"""
    shop = request.args.get("shop") or request.cookies.get("shop")
    access_token = get_token(shop)

    if not shop or not access_token:
        print(f"‚ùå –û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –¥–ª—è {shop} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç—ë–∫.")
        return redirect(f"/install?shop={shop}")

    settings = load_settings()

    return render_template_string(f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>Shopify Embedded App</title>
        <script src="https://unpkg.com/@shopify/app-bridge"></script>
        <script src="https://unpkg.com/@shopify/app-bridge-utils"></script>
        <script>
            var AppBridge = window["app-bridge"];
            var createApp = AppBridge.createApp;
            var actions = AppBridge.actions;
            var Redirect = actions.Redirect;

            var app = createApp({{
                apiKey: "{SHOPIFY_CLIENT_ID}",
                shopOrigin: "{shop}",
                forceRedirect: true
            }});
        </script>
          <style>
            body {{
                display: flex;
                justify-content: center;
                align-items: center;
                height: 100vh;
                background-color: #f4f4f4;
                margin: 0;
            }}

            .container {{
                width: 40%;
                background: white;
                padding-left: 20px;
                padding-right: 35px;
                padding-bottom: 10px;
                border-radius: 10px;
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
                text-align: center;
            }}

            .form-group {{
                margin-bottom: 15px;
            }}

            label {{
                font-weight: bold;
                display: block;
                margin-bottom: 5px;
            }}

            input {{
                width: 100%;
                padding: 8px;
                border: 1px solid #ccc;
                border-radius: 5px;
                font-size: 16px;
            }}

            button {{
                background-color: #007bff;
                color: white;
                padding: 10px 15px;
                border: none;
                border-radius: 5px;
                font-size: 16px;
                cursor: pointer;
                margin-top: 10px;
            }}

            button:hover {{
                background-color: #0056b3;
            }}

            #message {{
                margin-top: 15px;
                padding: 10px;
                border-radius: 5px;
                display: none;
                font-weight: bold;
                font-size: 16px;
            }}

            .success {{
                background-color: #d4edda;
                color: #155724;
                border: 1px solid #c3e6cb;
            }}

            .error {{
                background-color: #f8d7da;
                color: #721c24;
                border: 1px solid #f5c6cb;
            }}
        </style>
    </head>

    <body>
        <div class="container">
                <h2>Pricing settings</h2>
                <form id="settingsForm">
                    <div class="form-group">
                        <label>VAT (%):</label>
                        <input type="number" name="vat" value="{settings["vat"]}" step="0.01">
                    </div>
                    <div class="form-group">
                        <label>PayPal Fees (%):</label>
                        <input type="number" name="paypal_fees" value="{settings["paypal_fees"]}" step="0.01">
                    </div>
                    <div class="form-group">
                        <label>Second PayPal Fees (¬£):</label>
                        <input type="number" name="second_paypal_fees" value="{settings["second_paypal_fees"]}" step="0.01">
                    </div>
                    <div class="form-group">
                        <label>Profit Margin (%):</label>
                        <input type="number" name="profit" value="{settings["profit"]}" step="0.01">
                    </div>
                    <button type="submit">Update</button>
                    <button id="downloadCSV" type="button">Download CSV</button>
                </form>
                <p id="message"></p>
            </div>


        <script>
                document.addEventListener("DOMContentLoaded", function() {{
                    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã
                    var settingsForm = document.getElementById('settingsForm');
                    if (settingsForm) {{
                        settingsForm.addEventListener('submit', function(event) {{
                            event.preventDefault();
                            var formData = new FormData(this);

                            fetch('/update_settings', {{
                                method: 'POST',
                                body: formData
                            }})
                            .then(response => response.json())
                            .then(data => {{
                                let messageElement = document.getElementById('message');
                                if (messageElement) {{
                                    messageElement.innerText = data.message;
                                    messageElement.style.display = 'block';
                                    setTimeout(() => {{
                                        messageElement.style.display = 'none';
                                    }}, 3000);
                                }}
                            }})
                            .catch(error => console.error('–û—à–∏–±–∫–∞:', error));
                        }});
                    }} else {{
                        console.error("‚ùå –§–æ—Ä–º–∞ 'settingsForm' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
                    }}

                    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è CSV
                        var downloadBtn = document.getElementById('downloadCSV');
                        if (downloadBtn) {{
                            downloadBtn.addEventListener('click', function(event) {{
                                event.preventDefault();
                                window.location.href = '/download_csv';
                            }});
                        }} else {{
                            console.error("‚ùå –ö–Ω–æ–ø–∫–∞ 'Download CSV' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
                        }}
                }});
        </script>
    </body>
    </html>
    """)


# üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ PowerBody API
def fetch_powerbody_products():
    print("üîÑ –ó–∞–ø—Ä–æ—Å —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ PowerBody API...")
    try:
        client = Client(WSDL_URL)
        session = client.service.login(USERNAME, PASSWORD)
        response = client.service.call(session, "dropshipping.getProductList", [])

        if isinstance(response, str):
            try:
                response = json.loads(response)
            except json.JSONDecodeError:
                print("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON")
                return []

        if not isinstance(response, list):
            return []

        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(response)}")
        client.service.endSession(session)
        # üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        if response:
            print(f"üîç –ü—Ä–∏–º–µ—Ä —Ç–æ–≤–∞—Ä–∞: {json.dumps(response[0], indent=4, ensure_ascii=False)}")

        return response

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        return []


def fetch_product_info(product_id):
    """–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ —á–µ—Ä–µ–∑ dropshipping.getProductInfo —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–∫–∏ 403"""
    print(f"üîÑ –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ {product_id}...")

    client = None  # ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º client –∑–∞—Ä–∞–Ω–µ–µ
    session = None
    max_retries = 3  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    delay = 15  # –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º

    for attempt in range(max_retries):
        try:
            print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WSDL...")
            client = Client(WSDL_URL)  # üõ†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ SOAP
            session = client.service.login(USERNAME, PASSWORD)
            break  # –ï—Å–ª–∏ —É—Å–ø–µ—Ö ‚Äî –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ WSDL: {e}")
            if "403" in str(e):
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ 403. –ñ–¥—ë–º {delay} —Å–µ–∫ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                time.sleep(delay)
                delay *= 2  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
            else:
                return None  # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–∫–∞—Ö

    if not client or not session:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API PowerBody. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–≤–∞—Ä {product_id}.")
        return None

    try:
        params = json.dumps({"id": str(product_id)})  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É JSON
        response = client.service.call(session, "dropshipping.getProductInfo", params)

        if isinstance(response, str):
            try:
                response = json.loads(response)
            except json.JSONDecodeError:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_id}")
                return None

        client.service.endSession(session)
        return response

    except Exception as e:
        # üõë –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ 403, –ø—ã—Ç–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        if "403" in str(e):
            print(f"‚ùå –û—à–∏–±–∫–∞ 403: –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_id}. –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç...")

            try:
                response = client.service.call(session, "dropshipping.getProductInfo", {"id": str(product_id)})
                print(json.dumps(response, indent=4, ensure_ascii=False))
            except Exception as err:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {err}")

        if "503" in str(e):
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ 503 (–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω). –ñ–¥—ë–º {delay} —Å–µ–∫ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...")
            time.sleep(delay)
            delay *= 2

        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ {product_id}: {e}")

        return None

def fetch_all_shopify_products(shop, access_token):
    print("üîÑ –ó–∞–ø—Ä–æ—Å —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ Shopify API...")
    shopify_url = f"https://{shop}/admin/api/2024-01/products.json"
    headers = {"Content-Type": "application/json", "X-Shopify-Access-Token": access_token}
    params = {"fields": "id,variants", "limit": 250}
    all_products = []

    while True:
        time.sleep(0.6)  # ‚è≥ Shopify API –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –Ω–µ –±–æ–ª–µ–µ 2 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É
        response = requests.get(shopify_url, headers=headers, params=params)

        if response.status_code == 429:  # –û—à–∏–±–∫–∞ Too Many Requests
            retry_after = float(response.headers.get("Retry-After", 5))  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º float
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ 429 (Too Many Requests). –ñ–¥—ë–º {retry_after} —Å–µ–∫—É–Ω–¥...")
            time.sleep(retry_after)  # –ñ–¥—ë–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            continue  # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å

        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ Shopify API: {response.status_code} | {response.text}")
            break

        products = response.json().get("products", [])
        all_products.extend(products)
        print(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}, –≤—Å–µ–≥–æ: {len(all_products)}")

        # üõë –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ API
        api_limit = response.headers.get("X-Shopify-Shop-Api-Call-Limit", "0/40")
        current_calls, max_calls = map(int, api_limit.split("/"))
        print(f"üìä –õ–∏–º–∏—Ç API: {current_calls}/{max_calls}")

        if current_calls > max_calls * 0.8:  # –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ API –±–æ–ª–µ–µ 80%
            print(f"‚ö†Ô∏è API –∑–∞–≥—Ä—É–∂–µ–Ω ({current_calls}/{max_calls}). –ñ–¥—ë–º 2 —Å–µ–∫...")
            time.sleep(2)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        link_header = response.headers.get("Link")
        if link_header and 'rel="next"' in link_header:
            try:
                next_page_info = [l.split(";")[0].strip("<>") for l in link_header.split(",") if 'rel="next"' in l][0]
                params["page_info"] = next_page_info.split("page_info=")[1]
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ page_info: {e}")
                break
        else:
            break  # –ï—Å–ª–∏ –Ω–µ—Ç —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –≤—ã—Ö–æ–¥–∏–º

    print(f"‚úÖ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ Shopify: {len(all_products)}")
    return all_products




def calculate_final_price(base_price, vat, paypal_fees, second_paypal_fees, profit):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –ø–æ –≤–≤–µ–¥–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º"""
    if base_price is None or base_price == 0:
        return None

    vat_amount = base_price * (vat / 100)
    paypal_fees_amount = base_price * (paypal_fees / 100)
    profit_amount = base_price * (profit / 100)

    final_price = base_price + vat_amount + paypal_fees_amount + second_paypal_fees + profit_amount
    return round(final_price, 2)




def extract_flavor_advanced(product_name):
    if not product_name:
        return None, product_name

    packaging_keywords = [
        "pack", "caps", "grams", "ml", "softgels", "tabs", "vcaps", "servings",
        "g", "kg", "lb", "tablets", "capsules", "Small", "scoops", "Medium", "Mega Tabs", "x", "100 softgel",
        "Large", "Extra Large", "Grey", "Black", "White"  # üëà –¥–æ–±–∞–≤–∏–ª —Å—é–¥–∞ —è–≤–Ω—ã–µ "non-flavors"
    ]

    possible_flavors = [
        "Almond & Chocolate", "Apple", "Apple & Cinnamon", "Apple Cherry",
        "Apple Crumble", "Apple Fresh", "Apple Lemonade", "Apple Limeade",
        "Apple-Pear", "Apricot & Orange", "Baby Pink Cookies", "Baklava",
        "Banana", "Banana & Strawberry", "Banana + Strawberry", "Banana Cream",
        "Banana Creme", "Banana Milkshake", "Banana With Dark Chocolate", "Berry",
        "Berry Blast", "Berry Lemonade", "Berry Punch", "Big Cherries",
        "Big Juicy Melons", "Biscuit Spread", "Black Biscuit", "Black Cherry",
        "Blackberry", "Blackcurrant", "Blackcurrant Blast", "Blue Bears",
        "Blue Berry Pancakes", "Blue Grape", "Blue Lagoon", "Blue Raspberry",
        "Blue Raz", "Blue Razz Bon Bons", "Blue Razz Riot", "Blue Razz Watermelon",
        "Blue Sharkberry", "Blueberry", "Blueberry & Banana With Chia",
        "Blueberry & Mint", "Blueberry & Strawberry", "Blueberry Apple",
        "Blueberry Lemonade", "Blueberry Madness", "Blueberry Muffin",
        "Blueberry-Lime", "Brownie", "Bubbalicious", "Bubblegum", "Bubblegum & Blueberry",
        "Burst", "Caffe Latte", "Candy Bubblegum", "Candy Ice", "Candy Ice Blast",
        "Candy Icy Blast", "Caramel", "Caramel Biscuit", "Caramel Latte", "Caribbean Cola",
        "Carrot Cake", "Cereal Crunch", "Cereal Milk", "Cheescake", "Cheese And Onion",
        "Cherry", "Cherry & Almond", "Cherry & Apple", "Cherry & Lime", "Cherry + Orange",
        "Cherry Bakewell", "Cherry Berry", "Cherry Berry Bomb", "Cherry Bomb", "Cherry Chocolate Flavour",
        "Cherry Cola", "Cherry Cola Bottles", "Cherry Limeade", "Cherry Mango Margarita",
        "Chewable Orange", "Chews Orange", "Chips Barbecue", "Chips Pizza",
        "Chocamel Cups", "Choco  Hazelnut", "Choco Bueno", "Choco Peanut", "Chocolate",
        "Chocolate & Cinnamon", "Chocolate & Nuts", "Chocolate & Raspberry", "Chocolate + Cocoa",
        "Chocolate + Coconut", "Chocolate Brownies", "Chocolate Caramel", "Chocolate Caramel Biscuit",
        "Chocolate Coconut", "Chocolate Cookie Chip", "Chocolate Cookie Peanut",
        "Chocolate Cream", "Chocolate Cream White", "Chocolate Dessert", "Chocolate Fudge",
        "Chocolate Fudge Brownie", "Chocolate Fudge Cake", "Chocolate Hazelnut",
        "Chocolate Milkshake", "Chocolate Orange", "Chocolate Peanut", "Chocolate Peanut Butter",
        "Chocolate Raspberry Ripple", "Chocolate Salted Caramel", "Chocolate-Cranberry",
        "Cinnamon Apple Pie", "Cinnamon Bun", "Cinnamon Crunch", "Cinnamon Vanilla", "Citrus",
        "Citrus Lime", "Citrus Punch", "Citrus Twist", "Cloudy Lemonade", "Coco Crunch",
        "Cocoa", "Cocoa Heaven", "Coconut", "Coconut Cookie And Caramel", "Coconut Cookie Caramel Peanut",
        "Coconut Cream", "Coconut With Dark Chocolate", "Coffee", "Coffee Delight", "Cola",
        "Cola Bottles", "Cola Lime", "Colada", "Cookie & Coffee", "Cookie Double Chocolate",
        "Cookie Peanut Butter Raspberry Jelly", "Cookie White Choco Cream", "Cookie White Creamy Peanut",
        "Cookies & Cream", "Cookies 'N' Cream", "Cookies Cream", "Cosmic Rainbow", "Cotton Candy",
        "Cranberry", "Cranberry & Pomegranate", "Cranberry Juice", "Cream Crunch",
        "Cream Soda", "Cream With Chocolate Flakes", "Creamy Vanilla", "Custard",
        "Custard Cream", "Dark Chocolate", "Dippin' Dots  Ice Cream", "Double Chocolate",
        "Double Chocolate Brownie", "Double Rich Chocolate", "Dough-Lightful",
        "Dutch Chocolate", "English Toffee", "Exotic", "Exotic Peach", "Exotic Peach Mango",
        "Fizzy Bubblegum Bottles", "Fizzy Candy Crush", "Fizzy Cola Bottles",
        "Fizzy Peach Sweets", "Forest Berries", "Forest Burst", "Forest Fruits",
        "French Vanilla", "Fresh Apple", "Fresh Mint", "Fresh Orange", "Fruit",
        "Fruit Burst", "Fruit Candy", "Fruit Kaboom", "Fruit Punch", "Fruit Punch Blast",
        "Fruit Salad", "Fruity Cereal", "Fuzzy Peach", "Georgia Peach", "Ginger & Turmerones"
        , "Gold Cream", "Gold Double Rich", "Gold Rush", "Golden Syrup", "Grandma'S Maple Syrup",
        "Grape", "Grape Cooler", "Grape Juiced", "Grape Kola Kraken", "Grape Soda", "Grapefruit",
        "Grapefruit-Kiwi", "Green Apple", "Green Gummy Machine", "Green Lemonade",
        "Green Tea Ice Cream", "Gummy Candies", "Gummy Dummy", "Happy Cookie",
        "Hawthorn Berry", "Hazelnut", "Hazelnut Choco", "Hibiscus Pear", "Honey  Vanilla",
        "Honey & Cinnamon", "Honey Chamomile", "Ice Peach Tea", "Iced Blue Slush",
        "Iced Lemonade", "Iced Mocha Coffee", "Icy Blue Raspberry", "Icy Blue Raz",
        "Icy Mojito", "In Dark Milk And White Chocolate", "Island Breeze", "Italian Lemon Ice",
        "Jam Roly-Poly", "Jelly Bean", "Juicy Fruit", "Juicy Melons", "Juicy Watermelon", "Kiwi", "Kiwi & Strawberry",
        "Kiwi Strawberry", "Latte Macchiato", "Lemon", "Lemon & Lime", "Lemon Apple",
        "Lemon Cheesecake", "Lemon Ice", "Lemon Ice Tea", "Lemon Lime", "Lemon Raspberry",
        "Lemon Twist", "Lemon-Green Tea", "Lemon-Orange", "Lemone & Lime", "Lemongrass",
        "Life Is Peachy", "Lime Crime Mint", "Lime Papaya", "Mandarin Orange", "Mango",
        "Mango & Passion Fruit", "Mango & Passionfrui", "Mango & Passionfruit",
        "Mango & Pineapple", "Mango + Orange", "Mango + Vanilla", "Mango Passion Fruit",
        "Mango Pineapple", "Mango Strawberry", "Maqui Berry Extract", "Margarita Strawberry",
        "Marshmallow Milk", "Melon Candy", "Merry Berry Punch", "Miami", "Miami Vice",
        "Milk  Caramel", "Milk Chocolate", "Milk Chocolate Peanut", "Milky Choc", "Milky Chocolate",
        "Milky With Coconut", "Millions Blackcurrant", "Millions Bubblegum", "Millions Strawberry",
        "Mocha", "Mojito", "Muffin", "Muffin White", "Multifruit", "Natural Fruit Flavor",
        "Neutral", "Nuts Almonds In  Milk Chocolate And Cinnamon", "Oatmeal Cookie",
        "Orange", "Orange & Mango", "Orange Burst", "Orange Cherry", "Orange Cooler",
        "Orange Juice", "Orange Juiced", "Orange Lemon", "Orange Mango", "Orange Squash",
        "Orange-Mango", "Orange/Mango", "Original - Banana", "Original - Vanilla",
        "Original Bubblegum", "Original Citrus Berry", "Original Cola", "Original Cookies 'N' Cream",
        "Original Flavor", "Original Orange", "Original Sour Batch Bros", "Original Strawberry",
        "Original White Choco Bueno", "Passionfruit Guava", "Peach", "Peach Ice Tea", "Peach-Ice Tea",
        "Peanut Butter", "Peanut Butter Cookie", "Peanut Butter N' Honey", "Pear",
        "Pear Kiwi", "Pina Colada", "Pineapple", "Pineapple  + Coconut", "Pineapple Coconut",
        "Pineapple Mango", "Pink Lemonade", "Pistachio", "Pistachio Marzipan",
        "Pistachio White Chocolate", "Pomegranate", "Pomegranate Blueberry", "Purple Haze",
        "Push Pop", "Raging Cola", "Rainbow Dust", "Raspberry", "Raspberry & Cranberry",
        "Raspberry & White Chocolate", "Raspberry Chocolate Flavour", "Raspberry Lemon",
        "Raspberry Lemonade", "Raspberry Wild", "Raspberry Wild Strawberry", "Red Berry",
        "Red Berry Yuzu", "Red Fresh", "Red Kola", "Red Orange", "Roadside Lemonade", "Rocket Pop", "Salted Caramel",
        "Salted Caramel  & Chocolate Chip", "Salted Caramel Sauce", "Shake Coco Crunch", "Smash Apple", "Sour Candy", "Sour Cherry With Dark Chocolate", "Sour Citrus Punch", "Sour Grape", "Sour Green Apple", "Sour Gummy Bear", "Sour Gummy Bears", "Sour Jellies",
        "Sour Lemonade", "Southern Sweet Tea", "Spearmint Flavor", "Splash Grape", "Sticky Toffee Pudding", "Strawberry", "Strawberry & Kiwi", "Strawberry & Lime", "Strawberry & Raspberry", "Strawberry & Raspberry With Chia", "Strawberry Banana", "Strawberry Cream", "Strawberry Creme", "Strawberry Fit", "Strawberry Ice Cream", "Strawberry Kiwi", "Strawberry Laces", "Strawberry Lemon", "Strawberry Lemonade", "Strawberry Limeade",
        "Strawberry Mango", "Strawberry Margarita", "Strawberry Milkshake", "Strawberry Pineapple", "Strawberry Raspberry", "Strawberry Soda", "Strawberry Watermelon", "Strawberry-Banana", "Strawberry-Cranberry", "Strawberry-Kiwi", "Super-Colour Sweeties", "Sweet Coffee", "Sweet Iced Tea", "Sweet Paprika", "Sweet Potato Pie", "Sweet Tea", "Swizzels Drumstick Squashies", "Tangy Orange", "The Biscuit One", "The Glazed One", "The Jammy One", "Toffee", "Toffee Biscuit", "Toffee Chocolate", "Toffee Popcorn", "Toffee Pudding", "Triple Chocolate", "Triple Chocolate Brownie", "Tropic Blue", "Tropic Thunderburst", "Tropical", "Tropical Candy",
        "Tropical Citrus Punch", "Tropical Fruits", "Tropical Punch", "Tropical Thunder", "Tropical Vibes", "Tropical-Orange", "Tube Apricot", "Tube Blueberry", "Tutti Frutti", "Twirler Ice Cream", "Unflavored", "Unflavoured", "Vanilla", "Vanilla  Strawberry", "Vanilla & Pineapple", "Vanilla & Sour Cherry", "Vanilla Bean", "Vanilla Bean Ice Cream", "Vanilla Cake", "Vanilla Caramel", "Vanilla Cheesecake", "Vanilla Cream", "Vanilla Ice Cream", "Vanilla Milkshake", "Vanilla Pudding", "Vanilla Toffee", "Vanilla-Cinnamon", "Water Rocket Ice Lolly", "Watermelon", "Watermelon Blast", "Watermelon Juicy", "White Cherry  Frost", "White Choc Lemon Drizzle",
        "White Choc Pistachio", "White Choco Bueno", "White Choco Peanut", "White Choco Raspberry", "White Chocolate", "White Chocolate  & Coconut", "White Chocolate Biscuit Spread", "White Chocolate Caramel", "White Chocolate Caramel Biscuit", "White Chocolate Cookies & Cream", "White Chocolate Hazelnut", "White Chocolate Raspberry", "White Chocolate-Cranberry", "White Peanut Choco", "Wild Berry", "Wild Berry Punch", "Wild Fruits", "Wild Strawberry", "Wildberry", "Winter Apple", "Yoghurt & Blackcurrant", "Yummy Cookie", "Yummy Tutti Frutti Taste", "Yuzu & Apricot"
        "Chocolate Brownie",  "Sour Apple", "Bubblegum Crush", "Grape Splash", "Tropical Fruit",
        "Peanut Butter Strawberry Jelly", "Professional White Chocolate & Raspberry", "White Chocolate Coconut", "Chocolate Cookies & Cream",
        "Nuts Hazelnuts In Dark Milk And White Chocolate", "Nuts Almonds In White Chocolate & Cinnamon",
        "Nuts Almonds In White Chocolate & Coconut", "Ice Fresh", "Fruit Wild", "Strawberry Banana Twist",
        "Nuts Peanuts In White Chocolate", "Salted Caramel & Chocolate Chip", "White Chocolate + Coconut",
        "Professional Chocolate Mint", "French Vanilla Cream", "Vanilla Custard Cream", "Vanilla Very Berry",
        "Peach Mango", "Passion Fruit Lemon", "Dragon  Fruit  Yuzu", "Cherry Mango", "Chocolate & Hazelnut",
        "Cinnamon Apple Crumble", "Cinnamon Cereal Crunch", "Cookies And Cream", "Bubblegum Crush", "Strawberry Orange",
        "Raspberry Cheesecake", "Caramel Peanut Coconut", "Caramel Cappuccino", "Strawberry Summer",
        "White Choco Cream", "Rocket Ice Lolly", "Strawberry Yuzu", "Blackberry & Lime", "Chocolate Brownie",
        "Strawberry With Mint", "Strawberry Banana", "Apple Crumble", "Brutal Cola", "Strawberry & Kiwi",
        "Peanut Butter", "Milk Chocolate Caramel", "Vanilla Cheesecake", "Chocolate Cookies", "Vanilla Cream",
        "Cookies 'N' Cream", "Coffee & Cream", "Vanilla Bean", "Peanut", "Peanuts",
        "Cherry Apple", "Cherry Sour", "Cherry Bakewell", "Cherry Mango", "Red Hawaiian",
        "Redcurrant", "Disco Biscuit", "Bourbon Vanilla", "Tropical Mango", "Tropical Fruit",
        "Tropical Burst", "Tropical Candy", "Rainbow Candy", "Grapefruit With Eucalyptus", "Dragon Fruit",
        "Miami Peach", "Mango Lime", "Orange & Passion Fruit", "Bubble Gum", "Crunch",
        "Crispy Cookie", "Cinnamon Cookie", "Cinnamon Crunch", "Coconut Milk", "Cool Mint",
        "Fizzy Bubble Sweets", "Frozen Bombsicle", "Raspberry Strawberry", "Sour Batch Bros", "Sour Apple",
        "Ruby Berry", "Tigers Blood", "Blue Razz Freeze", "Blue Ice", "Black Currant",
        "White Cherry Frost", "Apple Burst", "Apple Pie", "Banana Peach", "Banana Nut Bread",
        "Juicy Nectar", "Juicy Fruit", "Strawberry", "Mango", "Lemonade",
        "Lime", "Lemon Cheescake", "Choco Hazelnut", "Choco Bueno", "Chocolate Chip",
        "Chocolate Mint", "Chocolate Hazelnut", "Chocolate Caramel", "Caramel Peanut", "Carrot Cake",
        "Baddy Berry", "Butterscotch", "Syrup Sponge", "Edelweiss & Pomegranate", "Pomegranate Grapefruit",
        "Citrus Berry", "Cola", "Cookies", "Cookie", "White Grape", "White Creamy Peanut",

    ]


    possible_flavors.sort(key=len, reverse=True)
    packaging_keywords_lower = set(k.lower() for k in packaging_keywords)

    for flavor in possible_flavors:
        if product_name.strip().lower().startswith(flavor.lower()):
            return None, product_name.rstrip(",").strip()

    for flavor in possible_flavors:
        if flavor.lower() in packaging_keywords_lower:
            continue  # ‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–ø–∞–∫–æ–≤–æ—á–Ω—ã–µ —Å–ª–æ–≤–∞

        match = re.search(rf"\b{re.escape(flavor)}\b", product_name, re.IGNORECASE)
        if match:
            after_match_pos = match.end()
            remainder = product_name[after_match_pos:].strip().lower()
            if remainder.startswith("oil"):
                continue

            item_name = re.sub(rf"\b{re.escape(flavor)}\b", "", product_name, flags=re.IGNORECASE).strip()
            item_name = item_name.rstrip(",").strip()
            return flavor, item_name

    match_combo = re.search(r"(\b\w+\b)\s*(?:[-,&])\s*(\b\w+\b)", product_name)
    if match_combo:
        part1 = match_combo.group(1)
        part2 = match_combo.group(2)
        combined = f"{part1} {part2}"
        if combined in possible_flavors and combined.lower() not in packaging_keywords_lower:
            item_name = product_name.replace(match_combo.group(0), "").strip(" ,-")
            return combined, item_name

    match_with = re.search(r"(.+?)\s+with\s+(.+)", product_name, re.IGNORECASE)
    if match_with:
        item_name = match_with.group(1).strip()
        possible_flavor = match_with.group(2).strip()
        if not re.search(r"\d", possible_flavor) and possible_flavor.lower() not in packaging_keywords_lower:
            return possible_flavor, item_name

    match_digit_flavor = re.search(r"(.+?)\s+(\d+mg)\s+(.+)", product_name)
    if match_digit_flavor:
        item_name = match_digit_flavor.group(1).strip()
        possible_flavor = match_digit_flavor.group(3).strip()
        if not re.search(r"\d", possible_flavor) and possible_flavor.lower() not in packaging_keywords_lower:
            return possible_flavor, item_name

    match = re.search(r"(.+?)[,\-]\s*([\w\s&]+)$", product_name)
    if match:
        item_name = match.group(1).strip()
        possible_flavor = match.group(2).strip()
        if not re.search(r"\d", possible_flavor) and possible_flavor.lower() not in packaging_keywords_lower:
            return possible_flavor, item_name

    return None, product_name.rstrip(",").strip()



def make_request_with_retries(url, headers, data, method="PUT", max_retries=5):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ 429"""
    delay = 2
    for attempt in range(max_retries):
        response = requests.put(url, headers=headers, json=data) if method == "PUT" else requests.post(url,
                                                                                                       headers=headers,
                                                                                                       json=data)

        if response.status_code == 200:
            return response
        elif response.status_code == 429:
            print(f"‚ö†Ô∏è Error 429 (Too Many Requests). Send request again {delay} sec...")
            time.sleep(delay)
            delay *= 2
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code} | {response.text}")
            return response
    print("üö® –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–ø—Ä–æ—Å–∞.")
    return response


def update_shopify_variant(shop, access_token, variant_id, inventory_item_id, new_price, new_quantity, sku):
    headers = {"Content-Type": "application/json", "X-Shopify-Access-Token": access_token}

    print(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º variant {variant_id} (SKU: {sku}): –¶–µ–Ω–∞ {new_price}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ {new_quantity}")

    update_variant_url = f"https://{shop}/admin/api/2024-01/variants/{variant_id}.json"
    variant_data = {"variant": {"id": variant_id, "price": f"{new_price:.2f}"}}

    max_retries = 5
    delay = 2  # –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

    for attempt in range(max_retries):
        response = requests.put(update_variant_url, headers=headers, json=variant_data)

        if response.status_code == 200:
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Ü–µ–Ω–∞ –¥–ª—è variant {variant_id} (SKU: {sku}): {new_price}")
            break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞, –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
        elif response.status_code == 429:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ 429 (Too Many Requests) –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã {sku}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...")
            time.sleep(delay)
            delay *= 2  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –≤ 2 —Ä–∞–∑–∞
        else:
            print(
                f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è variant {variant_id} (SKU: {sku}): {response.status_code} - {response.text}")
            break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª –ø—Ä–∏ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–∫–∞—Ö

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
    update_inventory_url = f"https://{shop}/admin/api/2024-01/inventory_levels/set.json"
    inventory_data = {"location_id": 85726363936, "inventory_item_id": inventory_item_id, "available": new_quantity}

    delay = 2  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞

    for attempt in range(max_retries):
        response = requests.post(update_inventory_url, headers=headers, json=inventory_data)

        if response.status_code == 200:
            print(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è variant {variant_id} (SKU: {sku}): {new_quantity}")
            break
        elif response.status_code == 429:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ 429 (Too Many Requests) –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ {sku}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...")
            time.sleep(delay)
            delay *= 2  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
        else:
            print(
                f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è variant {variant_id} (SKU: {sku}): {response.status_code} - {response.text}")
            break


def sync_products(shop):
    """–ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å—å—é –≤ CSV (—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞)"""
    access_token = get_token(shop)
    if not access_token:
        print(f"‚ùå –û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –¥–ª—è {shop} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é.")
        return

    print(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–ª—è {shop}...")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings = load_settings()
    vat = settings["vat"]
    paypal_fees = settings["paypal_fees"]
    second_paypal_fees = settings["second_paypal_fees"]
    profit = settings["profit"]

    powerbody_products = fetch_powerbody_products()
    shopify_products = fetch_all_shopify_products(shop, access_token)
    in_progress_flag = os.path.join(CSV_DIR, ".sync_in_progress")
    open(in_progress_flag, "w").close()  # —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª-—Ñ–ª–∞–≥
    final_filename = None
    try:
        shopify_sku_map = {
            v.get("sku"): (v["id"], v.get("inventory_item_id"), v.get("price"), v.get("inventory_quantity"))
            for p in shopify_products for v in p["variants"] if v.get("sku")
        }

        synced_count = 0
        timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        temp_filename = os.path.join(CSV_DIR, f"~sync_temp_{timestamp}.csv")
        final_filename = os.path.join(CSV_DIR, f"sync_report_{timestamp}.csv")

        # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π CSV-—Ñ–∞–π–ª –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        with open(temp_filename, "w", newline="", encoding="utf-8") as file:
            writer = csv.writer(file)
            header = ["SKU", "Brand Name", "Item Name", "Flavor", "Weight (grams)", "EAN", "Price API", "Price Shopify",
                      "Quantity"]
            writer.writerow(header)

            for pb_product in powerbody_products:
                if not isinstance(pb_product, dict):
                    continue

                sku = pb_product.get("sku")
                product_id = str(pb_product.get("product_id") or "").strip()

                if not product_id or not sku or sku not in shopify_sku_map:
                    print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω —Ç–æ–≤–∞—Ä SKU `{sku}`, product_id: `{product_id}`")
                    continue

                print(f"üîÑ –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ `{product_id}` –¥–ª—è SKU `{sku}`...")
                product_info = fetch_product_info(product_id)

                if not product_info:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ `{product_id}`. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                    continue

                base_price = float(pb_product.get("retail_price", pb_product.get("price", "0.00")) or 0.00)
                new_quantity = pb_product.get("qty")

                variant_id, inventory_item_id, old_price, old_quantity = shopify_sku_map[sku]

                brand_name = product_info.get("manufacturer")
                name = product_info.get("name", "")
                weight = product_info.get("weight", 0)
                ean = product_info.get("ean")

                # üÜï –û–ø—Ä–µ–¥–µ–ª—è–µ–º `Flavor` –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º `Item Name`
                flavor, item_name = extract_flavor_advanced(name)

                # üÜï –ï—Å–ª–∏ `Flavor` –ø—É—Å—Ç–æ–π, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º `None`
                if not flavor or flavor.lower() == "non":
                    flavor = None

                # üÜï –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤–µ—Å –≤ –≥—Ä–∞–º–º—ã
                weight_grams = int(float(weight) * 1000) if weight else None

                # üõí –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Ü–µ–Ω—É
                final_price = calculate_final_price(base_price, vat, paypal_fees, second_paypal_fees, profit)

                # üíæ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ CSV —Å—Ä–∞–∑—É!
                clean_item_name = re.sub(r"\s*,\s*", " ", item_name).strip() if item_name else None
                row = [sku, brand_name, clean_item_name, flavor, weight_grams, ean, base_price, final_price, new_quantity]
                writer.writerow(row)
                print(f"üì¶ –ü–æ–ª–Ω–æ–µ –∏–º—è –∏–∑ PowerBody: {name}")
                print(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ –≤ CSV: {row}")

                # üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä
                if old_price != final_price or old_quantity != new_quantity:
                    print(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º SKU `{sku}`: –¶–µ–Ω–∞ API `{base_price}` ‚Üí Shopify `{final_price}`, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: `{old_quantity}` ‚Üí `{new_quantity}`")
                    update_shopify_variant(shop, access_token, variant_id, inventory_item_id, final_price, new_quantity, sku)
                    synced_count += 1
                    time.sleep(0.6)  # üõë Shopify API –ª–∏–º–∏—Ç - –Ω–µ –±–æ–ª–µ–µ 2 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É

        # ‚úÖ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–ø–∏—Å–∏
        os.rename(temp_filename, final_filename)
        print(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {synced_count}")
        print(f"üìÇ CSV-—Ñ–∞–π–ª –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: `{final_filename}`")
    finally:
        if os.path.exists(in_progress_flag):
            os.remove(in_progress_flag)

    return final_filename




@app.route('/update_settings', methods=['POST'])
def update_settings():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    settings = {
        "vat": float(request.form.get("vat", 20)),
        "paypal_fees": float(request.form.get("paypal_fees", 3)),
        "second_paypal_fees": float(request.form.get("second_paypal_fees", 0.20)),
        "profit": float(request.form.get("profit", 30))
    }
    save_settings(settings)
    return jsonify({"status": "success", "message": "‚úÖ Settings saved!"})


def load_settings():
    if os.path.exists(SETTINGS_FILE):
        with open(SETTINGS_FILE, "r") as file:
            return json.load(file)
    else:
        default_settings = {"vat": 20.0, "paypal_fees": 3.0, "second_paypal_fees": 0.20, "profit": 30.0}
        save_settings(default_settings)
        return default_settings


def save_settings(settings):
    with open(SETTINGS_FILE, "w") as file:
        json.dump(settings, file, indent=4)


def save_to_csv(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ CSV —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏."""
    if not data:
        print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ CSV.")
        return None  # –í—ã—Ö–æ–¥, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç

    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    filename = os.path.join(CSV_DIR, f"sync_report_{timestamp}.csv")

    with open(filename, "w", newline="", encoding="utf-8") as file:
        writer = csv.writer(file)
        header = ["SKU", "Brand Name", "Item Name", "Flavor", "Weight (grams)", "EAN", "Price API", "Price Shopify",
                  "Quantity"]
        writer.writerow(header)

        print("\nüìå **–ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ CSV-–æ—Ç—á—ë—Ç–∞...**")
        print("------------------------------------------------------")
        print("üìù –ó–∞–≥–æ–ª–æ–≤–∫–∏:", header)

        for row in data:
            writer.writerow(row)
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –≤ CSV: {row}")  # üî• –õ–æ–≥ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏

        print("------------------------------------------------------")
        print(f"‚úÖ CSV —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: `{filename}`")

    # üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    with open(filename, "r", encoding="utf-8") as file:
        print("\nüîç **–°–æ–¥–µ—Ä–∂–∏–º–æ–µ CSV-—Ñ–∞–π–ª–∞:**")
        print(file.read())

    return filename  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É


def get_latest_csv():
    """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π CSV-—Ñ–∞–π–ª (–Ω–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏ –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ)."""
    files = sorted(os.listdir(CSV_DIR), reverse=True)
    for file in files:
        if file.startswith("sync_report_") and file.endswith(".csv") and not file.startswith("~"):
            return os.path.join(CSV_DIR, file)
    return None


@app.route("/download_csv")
def download_csv():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π CSV-—Ñ–∞–π–ª, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ."""
    files = [f for f in os.listdir(CSV_DIR) if f.startswith("sync_report_") and not f.startswith("~")]
    files.sort(reverse=True)

    if not files:
        return "‚ùå No CSV files available.", 404

    latest_file = os.path.join(CSV_DIR, files[0])
    print(f"‚¨áÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª: {latest_file}")
    return send_file(latest_file, as_attachment=True)


# üîÑ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
def start_sync_for_shop(shop, access_token):
    job_id = f"sync_{shop}"
    existing_job = scheduler.get_job(job_id)

    if not existing_job:
        print(f"üïí –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è {shop} –∫–∞–∂–¥—ã–µ 120 –º–∏–Ω—É—Ç.")
        scheduler.add_job(sync_products, 'interval', minutes=120, args=[shop], id=job_id, replace_existing=True)


# üîÑ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞
def schedule_sync():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–ª—è –≤—Å–µ—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ç–æ–∫–µ–Ω—ã –≤ Redis."""
    keys = redis_client.keys("shopify_token:*")  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ —Å —Ç–æ–∫–µ–Ω–∞–º–∏
    if not keys:
        print("‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –≤ Redis.")
        return

    for key in keys:
        shop = key.split("shopify_token:")[-1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
        access_token = redis_client.get(key)

        if access_token:
            start_sync_for_shop(shop, access_token)
            print(f"üîÑ –ó–∞–ø—É—â–µ–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è {shop}")
        else:
            print(f"‚ö†Ô∏è –¢–æ–∫–µ–Ω –¥–ª—è {shop} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ Redis.")


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")
    schedule_sync()
    app.run(host='0.0.0.0', port=80, debug=False)